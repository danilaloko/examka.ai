<?php

namespace App\Console\Commands;

use App\Enums\DocumentStatus;
use App\Models\Document;
use App\Models\DocumentType;
use App\Models\User;
use Illuminate\Console\Command;

class CreateTestDocumentsCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'documents:create-test {user : ID –∏–ª–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $userInput = $this->argument('user');
        
        // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ email
        $user = is_numeric($userInput) 
            ? User::find($userInput)
            : User::where('email', $userInput)->first();

        if (!$user) {
            $this->error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {$userInput}");
            return Command::FAILURE;
        }

        $this->info("üë§ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$user->name} ({$user->email})");
        $this->line('');

        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        $documentTypes = DocumentType::all();
        
        if ($documentTypes->isEmpty()) {
            $this->error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–¥–µ—Ä DocumentTypeSeeder.');
            return Command::FAILURE;
        }

        // –ú–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ—Ä–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã)
        $testStatuses = [
            DocumentStatus::DRAFT,
            DocumentStatus::PRE_GENERATED,
            DocumentStatus::FULL_GENERATED,
            DocumentStatus::IN_REVIEW,
            DocumentStatus::APPROVED,
            DocumentStatus::REJECTED,
        ];

        $createdCount = 0;

        // –°–æ–∑–¥–∞–µ–º –ø–æ 1-2 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        foreach ($documentTypes as $index => $documentType) {
            $documentsToCreate = rand(1, 2); // 1-2 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ç–∏–ø
            
            for ($i = 0; $i < $documentsToCreate; $i++) {
                $status = $testStatuses[($index * $documentsToCreate + $i) % count($testStatuses)];
                
                $document = Document::factory()->create([
                    'user_id' => $user->id,
                    'document_type_id' => $documentType->id,
                    'title' => "–¢–µ—Å—Ç–æ–≤—ã–π {$documentType->name} ‚Ññ" . ($i + 1),
                    'status' => $status,
                ]);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                $structure = $document->structure;
                $structure['topic'] = "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è {$documentType->name} ‚Ññ" . ($i + 1);
                $document->update(['structure' => $structure]);

                $createdCount++;
                
                $this->line("‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {$document->title} (–°—Ç–∞—Ç—É—Å: {$status->getLabel()})");
            }
        }

        $this->line('');
        $this->info("üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {$createdCount}");
        $this->line('');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        $this->info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
        foreach ($testStatuses as $status) {
            $count = Document::where('user_id', $user->id)
                ->where('status', $status)
                ->count();
            if ($count > 0) {
                $this->line("   {$status->getLabel()}: {$count}");
            }
        }

        return Command::SUCCESS;
    }
}
