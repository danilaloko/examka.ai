<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Queue;

class QueueMonitor extends Command
{
    protected $signature = 'queue:monitor-performance 
                           {--refresh=5 : –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö}
                           {--queue=document_creates : –û—á–µ—Ä–µ–¥—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞}';

    protected $description = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏';

    public function handle()
    {
        $queue = $this->option('queue');
        $refresh = (int) $this->option('refresh');
        
        $this->info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏: {$queue}");
        $this->info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {$refresh} —Å–µ–∫—É–Ω–¥");
        $this->info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
        $this->line('');
        
        $startTime = microtime(true);
        $totalProcessed = 0;
        $previousStats = null;
        
        while (true) {
            $currentTime = microtime(true);
            $uptime = $currentTime - $startTime;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            $stats = $this->getQueueStats($queue);
            
            // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            $this->getOutput()->write("\033\143");
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            $this->info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏: {$queue}");
            $this->info("üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " . gmdate('H:i:s', $uptime));
            $this->info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: " . date('H:i:s'));
            $this->line('');
            
            // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            $this->line("üìà –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            $this->line("   –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á: " . $stats['pending']);
            $this->line("   –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è: " . $stats['failed']);
            $this->line("   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " . $stats['total_processed']);
            $this->line('');
            
            // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if ($previousStats) {
                $processed = $stats['total_processed'] - $previousStats['total_processed'];
                $rate = $processed / $refresh;
                $this->line("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:");
                $this->line("   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {$refresh}—Å: " . $processed);
                $this->line("   –°–∫–æ—Ä–æ—Å—Ç—å: " . round($rate, 2) . " –∑–∞–¥–∞—á/—Å–µ–∫");
                $this->line("   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: " . round($stats['total_processed'] / $uptime, 2) . " –∑–∞–¥–∞—á/—Å–µ–∫");
                $this->line('');
            }
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            $docStats = $this->getDocumentStats();
            $this->line("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:");
            $this->line("   –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è: " . $docStats['generating']);
            $this->line("   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: " . $docStats['completed']);
            $this->line("   –û—à–∏–±–æ–∫: " . $docStats['failed']);
            $this->line('');
            
            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            $memoryUsage = memory_get_usage(true);
            $this->line("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:");
            $this->line("   –¢–µ–∫—É—â–µ–µ: " . $this->formatBytes($memoryUsage));
            $this->line("   –ü–∏–∫: " . $this->formatBytes(memory_get_peak_usage(true)));
            $this->line('');
            
            // –ê–∫—Ç–∏–≤–Ω—ã–µ worker'—ã (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
            $activeWorkers = $this->getActiveWorkers();
            if ($activeWorkers > 0) {
                $this->line("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ worker'—ã: " . $activeWorkers);
                $this->line('');
            }
            
            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
            $recentJobs = $this->getRecentJobs($queue, 5);
            if (!empty($recentJobs)) {
                $this->line("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
                foreach ($recentJobs as $job) {
                    $this->line("   " . $job['created_at'] . " - " . $job['job_type']);
                }
                $this->line('');
            }
            
            $previousStats = $stats;
            sleep($refresh);
        }
    }
    
    private function getQueueStats(string $queue): array
    {
        $connection = config('queue.default');
        
        if ($connection === 'database') {
            $pending = DB::table('jobs')
                ->where('queue', $queue)
                ->count();
                
            $failed = DB::table('failed_jobs')
                ->where('queue', $queue)
                ->count();
                
            $totalProcessed = Cache::get("queue_stats_{$queue}_processed", 0);
            
        } else {
            // –î–ª—è Redis –∏ –¥—Ä—É–≥–∏—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤
            $pending = Queue::size($queue);
            $failed = 0; // –°–ª–æ–∂–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –¥–ª—è Redis
            $totalProcessed = Cache::get("queue_stats_{$queue}_processed", 0);
        }
        
        return [
            'pending' => $pending,
            'failed' => $failed,
            'total_processed' => $totalProcessed
        ];
    }
    
    private function getDocumentStats(): array
    {
        return [
            'generating' => DB::table('documents')
                ->whereIn('status', ['pre_generating', 'full_generating'])
                ->count(),
            'completed' => DB::table('documents')
                ->where('status', 'pre_generated')
                ->count(),
            'failed' => DB::table('documents')
                ->whereIn('status', ['pre_generation_failed', 'full_generation_failed'])
                ->count(),
        ];
    }
    
    private function getActiveWorkers(): int
    {
        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—ç—à–∞
        $workers = 0;
        for ($i = 1; $i <= 10; $i++) {
            if (Cache::has("worker_heartbeat_{$i}")) {
                $workers++;
            }
        }
        return $workers;
    }
    
    private function getRecentJobs(string $queue, int $limit): array
    {
        return DB::table('jobs')
            ->where('queue', $queue)
            ->orderBy('created_at', 'desc')
            ->limit($limit)
            ->get()
            ->map(function ($job) {
                $payload = json_decode($job->payload, true);
                return [
                    'created_at' => date('H:i:s', $job->created_at),
                    'job_type' => $payload['displayName'] ?? 'Unknown'
                ];
            })
            ->toArray();
    }
    
    private function formatBytes(int $bytes): string
    {
        $units = ['B', 'KB', 'MB', 'GB'];
        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);
        
        $bytes /= pow(1024, $pow);
        
        return round($bytes, 2) . ' ' . $units[$pow];
    }
} 