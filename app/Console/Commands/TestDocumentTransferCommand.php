<?php

namespace App\Console\Commands;

use App\Models\User;
use App\Models\Document;
use App\Services\Documents\DocumentTransferService;
use Illuminate\Console\Command;

class TestDocumentTransferCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:document-transfer {--create-test-data}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
        
        if ($this->option('create-test-data')) {
            $this->createTestData();
        }

        $transferService = new DocumentTransferService();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        $tempUsers = User::where('email', 'like', '%@auto.user')->get();
        
        if ($tempUsers->isEmpty()) {
            $this->warn('‚ùå –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (@auto.user)');
            return;
        }

        $this->info('üìã –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' . $tempUsers->count());
        
        foreach ($tempUsers as $tempUser) {
            $documentsCount = Document::where('user_id', $tempUser->id)->count();
            $this->line("   ID: {$tempUser->id}, Email: {$tempUser->email}, –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {$documentsCount}");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        $permanentUsers = User::where('email', 'not like', '%@auto.user')->get();
        
        if ($permanentUsers->isEmpty()) {
            $this->warn('‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        $this->info('üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' . $permanentUsers->count());
        
        foreach ($permanentUsers as $permanentUser) {
            $documentsCount = Document::where('user_id', $permanentUser->id)->count();
            $this->line("   ID: {$permanentUser->id}, Email: {$permanentUser->email}, –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {$documentsCount}");
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å
        if ($this->confirm('–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?')) {
            $fromUser = $tempUsers->first();
            $toUser = $permanentUsers->first();
            
            $this->info("üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$fromUser->id} –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$toUser->id}");
            
            $result = $transferService->transferDocuments($fromUser, $toUser);
            
            if ($result['success']) {
                $this->info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {$result['transferred_count']}");
            } else {
                $this->error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {$result['message']}");
            }
        }
    }

    private function createTestData()
    {
        $this->info('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        $tempUser = User::firstOrCreate([
            'email' => 'test_temp@auto.user'
        ], [
            'name' => '–í—Ä–µ–º–µ–Ω–Ω—ã–π –¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'password' => bcrypt('password'),
            'auth_token' => \Illuminate\Support\Str::random(32),
            'role_id' => 0,
            'status' => 1,
        ]);

        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $permanentUser = User::firstOrCreate([
            'email' => 'test_permanent@example.com'
        ], [
            'name' => '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'password' => bcrypt('password'),
            'auth_token' => \Illuminate\Support\Str::random(32),
            'role_id' => 0,
            'status' => 1,
        ]);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (Document::where('user_id', $tempUser->id)->count() === 0) {
            Document::factory()->count(3)->create([
                'user_id' => $tempUser->id
            ]);
            
            $this->info("üìÑ –°–æ–∑–¥–∞–Ω–æ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }

        $this->info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã");
    }
} 