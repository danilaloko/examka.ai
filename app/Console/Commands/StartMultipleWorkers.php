<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Symfony\Component\Process\Process;

class StartMultipleWorkers extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'queue:work-parallel {--workers=3 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ worker\'–æ–≤} {--timeout=600 : –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ worker\'–∞}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ó–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö worker\'–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $workers = (int) $this->option('workers');
        $timeout = (int) $this->option('timeout');
        
        $this->info("üöÄ –ó–∞–ø—É—Å–∫ {$workers} worker'–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏");
        $this->info("‚è∞ –¢–∞–π–º–∞—É—Ç: {$timeout} —Å–µ–∫—É–Ω–¥");
        $this->info("üìã –û—á–µ—Ä–µ–¥—å: document_creates");
        $this->line('');
        
        $processes = [];
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º worker'—ã
        for ($i = 1; $i <= $workers; $i++) {
            $process = new Process([
                'php', 
                'artisan', 
                'queue:work',
                '--queue=document_creates',
                "--timeout={$timeout}",
                '--tries=3',
                '--backoff=10',
                '--verbose',
                '--name=worker-' . $i
            ]);
            
            $process->setTimeout(null);
            $process->start();
            
            $processes[$i] = $process;
            $this->info("‚úÖ Worker #{$i} –∑–∞–ø—É—â–µ–Ω (PID: {$process->getPid()})");
        }
        
        $this->line('');
        $this->info('üéØ –í—Å–µ worker\'—ã –∑–∞–ø—É—â–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
        $this->line('');
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        while (true) {
            $activeWorkers = 0;
            
            foreach ($processes as $id => $process) {
                if ($process->isRunning()) {
                    $activeWorkers++;
                } else {
                    $this->warn("‚ö†Ô∏è Worker #{$id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...");
                    
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —É–ø–∞–≤—à–∏–π worker
                    $newProcess = new Process([
                        'php', 
                        'artisan', 
                        'queue:work',
                        '--queue=document_creates',
                        "--timeout={$timeout}",
                        '--tries=3',
                        '--backoff=10',
                        '--verbose',
                        '--name=worker-' . $id
                    ]);
                    
                    $newProcess->setTimeout(null);
                    $newProcess->start();
                    $processes[$id] = $newProcess;
                    
                    $this->info("‚úÖ Worker #{$id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω (PID: {$newProcess->getPid()})");
                }
            }
            
            $this->line("\rüîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö worker'–æ–≤: {$activeWorkers}/{$workers}", false);
            
            sleep(5);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    public function __destruct()
    {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        foreach ($this->processes ?? [] as $process) {
            if ($process->isRunning()) {
                $process->stop();
            }
        }
    }
} 