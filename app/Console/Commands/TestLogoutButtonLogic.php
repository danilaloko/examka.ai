<?php

namespace App\Console\Commands;

use App\Models\User;
use Illuminate\Console\Command;

class TestLogoutButtonLogic extends Command
{
    protected $signature = 'test:logout-button {--user-id=}';
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';

    public function handle()
    {
        $this->info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞');
        $this->line('');

        if ($this->option('user-id')) {
            $user = User::find($this->option('user-id'));
            if (!$user) {
                $this->error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return 1;
            }
            $this->testSingleUser($user);
        } else {
            $this->testAllUsers();
        }

        return 0;
    }

    private function testSingleUser(User $user)
    {
        $this->info("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$user->name} (ID: {$user->id})");
        $this->line("üìß Email: {$user->email}");
        $this->line("üïê –°–æ–∑–¥–∞–Ω: {$user->created_at}");
        $this->line("üí∞ –ë–∞–ª–∞–Ω—Å: {$user->balance_rub} —Ä—É–±.");
        
        $documentsCount = $user->documents()->count();
        $this->line("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {$documentsCount}");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
        $shouldShow = $this->shouldShowLogoutButton($user, $documentsCount);
        
        $this->line('');
        if ($shouldShow) {
            $this->info('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –ü–û–ö–ê–ó–´–í–ê–ï–¢–°–Ø');
        } else {
            $this->warn('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –°–ö–†–´–¢–ê');
        }
        $this->line('');
    }

    private function testAllUsers()
    {
        $users = User::with('documents')->get();
        
        $showLogoutCount = 0;
        $hideLogoutCount = 0;
        $autoUsers = 0;
        $realUsers = 0;
        
        $this->info("üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {$users->count()}");
        $this->line('');
        
        foreach ($users as $user) {
            $documentsCount = $user->documents->count();
            $shouldShow = $this->shouldShowLogoutButton($user, $documentsCount);
            
            if ($shouldShow) {
                $showLogoutCount++;
            } else {
                $hideLogoutCount++;
            }
            
            if ($user->hasAutoGeneratedEmail()) {
                $autoUsers++;
            } else {
                $realUsers++;
            }
            
            $status = $shouldShow ? '‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å' : '‚ùå –°–∫—Ä—ã—Ç—å';
            $emailType = $user->hasAutoGeneratedEmail() ? '[AUTO]' : '[REAL]';
            
            $this->line(sprintf(
                '%s %s %-30s %s (–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: %d, –ë–∞–ª–∞–Ω—Å: %.0f)',
                $status,
                $emailType,
                $user->name,
                $user->email,
                $documentsCount,
                $user->balance_rub
            ));
        }
        
        $this->line('');
        $this->info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        $this->line("   –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É: {$showLogoutCount}");
        $this->line("   –°–∫—Ä—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É: {$hideLogoutCount}");
        $this->line("   –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {$autoUsers}");
        $this->line("   –†–µ–∞–ª—å–Ω—ã–µ: {$realUsers}");
        
        $this->line('');
        $this->info('üéØ –ü—É—Å—Ç—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞):');
        foreach ($users as $user) {
            $documentsCount = $user->documents->count();
            if (!$this->shouldShowLogoutButton($user, $documentsCount)) {
                $ageMinutes = $user->created_at->diffInMinutes(now());
                $this->line("   - {$user->name} (–≤–æ–∑—Ä–∞—Å—Ç: {$ageMinutes} –º–∏–Ω, email: {$user->email})");
            }
        }
    }

    private function shouldShowLogoutButton(User $user, int $documentsCount): bool
    {
        // 1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –¥–æ–∫—É–º–µ–Ω—Ç
        if ($documentsCount > 0) {
            return true;
        }
        
        // 2. –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω (–±–æ–ª—å—à–µ 0)
        if ($user->balance_rub > 0) {
            return true;
        }
        
        // 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å Telegram
        if ($user->telegram_id) {
            return true;
        }
        
        // 4. –ï—Å–ª–∏ email –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        if (!$user->hasAutoGeneratedEmail()) {
            return true;
        }
        
        // 5. –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–≥–ª–∞—Å–∏–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if ($user->privacy_consent) {
            return true;
        }
        
        // 6. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å Telegram (–¥–∞—Ç–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è)
        if ($user->telegram_linked_at) {
            return true;
        }
        
        // 7. –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–æ–ª–µ–µ 1 —á–∞—Å–∞
        if ($user->created_at->diffInHours(now()) >= 1) {
            return true;
        }
        
        // 8. –ï—Å–ª–∏ –≤ person –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–Ω—ã–π
        if ($user->person && 
            isset($user->person['telegram']) && 
            isset($user->person['telegram']['auto_created']) && 
            $user->person['telegram']['auto_created'] === false) {
            return true;
        }
        
        // 9. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if ($user->settings && !empty($user->settings)) {
            return true;
        }
        
        if ($user->statistics && !empty($user->statistics)) {
            return true;
        }
        
        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - —ç—Ç–æ "–ø—É—Å—Ç–æ–π" –∞–∫–∫–∞—É–Ω—Ç
        return false;
    }
} 