<?php

namespace App\Console\Commands;

use App\Models\Document;
use App\Models\User;
use App\Models\DocumentType;
use App\Jobs\AsyncGenerateDocument;
use App\Jobs\BatchGenerateDocuments;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Bus;
use Illuminate\Support\Facades\Log;

class TestParallelGeneration extends Command
{
    protected $signature = 'test:parallel-generation {--count=3 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏} {--user-id=1 : ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è} {--batch : –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å batch jobs} {--topic=–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ : –¢–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤}';

    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤';

    public function handle()
    {
        $count = (int) $this->option('count');
        $userId = (int) $this->option('user-id');
        $useBatch = $this->option('batch');
        $topic = $this->option('topic');

        $this->info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
        $this->info("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {$count}");
        $this->info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$userId}");
        $this->info("üóÇÔ∏è –¢–µ–º–∞: {$topic}");
        $this->info("‚öôÔ∏è –†–µ–∂–∏–º: " . ($useBatch ? 'Batch Jobs' : '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ Jobs'));
        $this->line('');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::find($userId);
        if (!$user) {
            $this->error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$userId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return 1;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        $documentType = DocumentType::first();
        if (!$documentType) {
            $this->error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞");
            return 1;
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        $documents = [];
        $documentIds = [];
        
        $this->info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...");
        for ($i = 1; $i <= $count; $i++) {
            $document = Document::create([
                'user_id' => $userId,
                'document_type_id' => $documentType->id,
                'title' => "{$topic} #{$i}",
                'structure' => ['topic' => "{$topic} #{$i}"],
                'status' => 'draft',
                'gpt_settings' => [
                    'service' => 'openai',
                    'model' => 'gpt-3.5-turbo',
                    'temperature' => 0.7
                ]
            ]);
            
            $documents[] = $document;
            $documentIds[] = $document->id;
            $this->line("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç #" . $i . " —Å–æ–∑–¥–∞–Ω (ID: " . $document->id . ")");
        }

        $this->line('');
        $startTime = microtime(true);

        if ($useBatch) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch jobs
            $this->info("üöÄ –ó–∞–ø—É—Å–∫ batch –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...");
            
            $batch = Bus::batch([
                new BatchGenerateDocuments($documentIds)
            ])
            ->then(function ($batch) {
                Log::info('Batch –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', ['batch_id' => $batch->id]);
            })
            ->catch(function ($batch, \Throwable $e) {
                Log::error('Batch –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞', [
                    'batch_id' => $batch->id,
                    'error' => $e->getMessage()
                ]);
            })
            ->name('test-parallel-generation')
            ->onQueue('document_creates')
            ->dispatch();

            $this->info("‚úÖ Batch —Å–æ–∑–¥–∞–Ω —Å ID: {$batch->id}");
            
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ jobs
            $this->info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö jobs...");
            
            foreach ($documents as $i => $document) {
                AsyncGenerateDocument::dispatch($document);
                $this->line("   ‚úÖ Job #" . ($i + 1) . " –∑–∞–ø—É—â–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ " . $document->id);
            }
        }

        $executionTime = microtime(true) - $startTime;
        
        $this->line('');
        $this->info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã –∑–∞ " . round($executionTime, 2) . " —Å–µ–∫—É–Ω–¥");
        $this->line('');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        $this->info("üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:");
        $this->line('');
        $this->line("üîÑ –ó–∞–ø—É—Å–∫ worker'–æ–≤ (–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö):");
        $this->line("   php artisan queue:work-parallel --workers=3");
        $this->line("   # –∏–ª–∏");
        $this->line("   php artisan queue:work-documents");
        $this->line('');
        $this->line("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:");
        foreach ($documentIds as $id) {
            $this->line("   curl -s http://localhost/documents/{$id}/status | jq '.status'");
        }
        $this->line('');
        $this->line("üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏:");
        $this->line("   php artisan queue:monitor document_creates");
        $this->line("   watch -n 2 'php artisan queue:size document_creates'");
        $this->line('');
        $this->line("üóÇÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:");
        $this->line("   tail -f storage/logs/queue.log");
        
        if ($useBatch) {
            $this->line('');
            $this->line("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ batch:");
            $this->line("   php artisan queue:batches");
        }

        return 0;
    }
} 