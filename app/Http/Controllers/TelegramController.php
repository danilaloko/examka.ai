<?php

namespace App\Http\Controllers;

use App\Services\Telegram\TelegramBotService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class TelegramController extends Controller
{
    private TelegramBotService $telegramService;

    public function __construct(TelegramBotService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–±-—Ö—É–∫ –æ—Ç Telegram
     */
    public function webhook(Request $request)
    {
        $update = $request->all();
        
        Log::info('Telegram webhook received', $update);

        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (isset($update['message'])) {
                $this->handleMessage($update['message']);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
            if (isset($update['callback_query'])) {
                $this->handleCallbackQuery($update['callback_query']);
            }
            
            return response()->json(['ok' => true]);
            
        } catch (\Exception $e) {
            Log::error('Telegram webhook processing failed', [
                'error' => $e->getMessage(),
                'update' => $update
            ]);
            
            return response()->json(['ok' => false], 500);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private function handleMessage(array $message): void
    {
        $text = $message['text'] ?? '';
        $chatId = $message['chat']['id'];

        // –ö–æ–º–∞–Ω–¥–∞ /start
        if (str_starts_with($text, '/start')) {
            $this->telegramService->handleStart($message);
            return;
        }

        // –ö–æ–º–∞–Ω–¥–∞ /help
        if ($text === '/help') {
            $this->telegramService->sendMessage($chatId, 
                "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" .
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" .
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n" .
                "üí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @gptpult_help"
            );
            return;
        }

        // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ –∂–µ –º–µ–Ω—é —á—Ç–æ –∏ –ø—Ä–∏ /start
        $this->telegramService->handleMessage($message);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É)
     */
    private function handleCallbackQuery(array $callbackQuery): void
    {
        $data = $callbackQuery['data'] ?? '';
        $chatId = $callbackQuery['message']['chat']['id'];
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö
        Log::info('Callback query received', ['data' => $data, 'chat_id' => $chatId]);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-—Ö—É–∫ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
     */
    public function setWebhook(Request $request)
    {
        $webhookUrl = config('services.telegram.webhook_url');
        
        if (!$webhookUrl) {
            return response()->json([
                'error' => 'Webhook URL not configured'
            ], 400);
        }

        $result = $this->telegramService->setWebhook($webhookUrl);

        return response()->json($result);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–µ–±-—Ö—É–∫
     */
    public function deleteWebhook()
    {
        $result = $this->telegramService->deleteWebhook();
        return response()->json($result);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    public function getMe()
    {
        $result = $this->telegramService->getMe();
        return response()->json($result);
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ long polling
     * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!
     */
    public function testMode()
    {
        if (app()->environment('production')) {
            return response()->json([
                'error' => 'Test mode is not available in production'
            ], 403);
        }

        // –£–¥–∞–ª—è–µ–º –≤–µ–±-—Ö—É–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        $this->telegramService->deleteWebhook();
        
        $offset = 0;
        
        echo "üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n";
        echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n\n";
        
        while (true) {
            try {
                $updates = $this->getUpdates($offset);
                
                if ($updates['ok'] && !empty($updates['result'])) {
                    foreach ($updates['result'] as $update) {
                        $this->processTestUpdate($update);
                        $offset = $update['update_id'] + 1;
                    }
                }
                
                sleep(1); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            } catch (\Exception $e) {
                Log::error('Test mode error', ['error' => $e->getMessage()]);
                echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
                sleep(5);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ long polling
     */
    private function getUpdates(int $offset = 0): array
    {
        $botToken = config('services.telegram.bot_token');
        $url = "https://api.telegram.org/bot{$botToken}/getUpdates";
        
        $response = file_get_contents($url . '?' . http_build_query([
            'offset' => $offset,
            'timeout' => 30,
            'allowed_updates' => json_encode(['message', 'callback_query'])
        ]));
        
        return json_decode($response, true);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
     */
    private function processTestUpdate(array $update): void
    {
        echo "üì® –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " . json_encode($update, JSON_UNESCAPED_UNICODE) . "\n";
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (isset($update['message'])) {
            $this->handleMessage($update['message']);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        if (isset($update['callback_query'])) {
            $this->handleCallbackQuery($update['callback_query']);
        }
    }
} 