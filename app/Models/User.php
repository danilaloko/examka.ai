<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\Enums\UserRole;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;
    use HasApiTokens;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'auth_token',
        'parent_id',
        'role_id',
        'status',
        'key',
        'balance_rub',
        'person',
        'settings',
        'statistics',
        'telegram_id',
        'telegram_username',
        'telegram_link_token',
        'telegram_token_expires_at',
        'telegram_linked_at',
        'privacy_consent',
        'privacy_consent_at'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'role_id' => UserRole::class,
        'person' => 'array',
        'settings' => 'array',
        'statistics' => 'array',
        'telegram_token_expires_at' => 'datetime',
        'privacy_consent_at' => 'datetime'
    ];

    /**
     * Отношение к заказам
     */
    public function orders(): HasMany
    {
        return $this->hasMany(Order::class);
    }

    /**
     * Отношение к платежам
     */
    public function payments(): HasMany
    {
        return $this->hasMany(Payment::class);
    }

    /**
     * Отношение к транзакциям баланса
     */
    public function transitions(): HasMany
    {
        return $this->hasMany(Transition::class);
    }

    /**
     * Отношение к документам
     */
    public function documents(): HasMany
    {
        return $this->hasMany(Document::class);
    }

    /**
     * Проверка роли администратора
     */
    public function isAdmin(): bool
    {
        return $this->role_id === UserRole::ADMIN;
    }

    /**
     * Проверка роли обычного пользователя
     */
    public function isUser(): bool
    {
        return $this->role_id === UserRole::USER;
    }

    /**
     * Проверить, является ли email автогенерированным
     */
    public function hasAutoGeneratedEmail(): bool
    {
        return str_ends_with($this->email, '@auto.user') || str_ends_with($this->email, '@linked.user');
    }
}
