<?php

namespace App\Services\Telegram;

use App\Models\Document;
use App\Models\User;
use Illuminate\Support\Facades\Log;
use App\Models\File;

class TelegramNotificationService
{
    private TelegramBotService $telegramService;

    public function __construct(TelegramBotService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    public function notifyDocumentCreated(Document $document): void
    {
        $user = $document->user;
        
        if (!$this->canSendNotification($user)) {
            return;
        }

        $message = "üìù <b>–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n" .
            "–ù–∞–∑–≤–∞–Ω–∏–µ: {$document->title}\n" .
            "–¢–∏–ø: {$document->documentType->name}\n" .
            "–°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...\n\n" .
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏";

        $this->sendNotificationWithMenu($user, $message, $document);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    public function notifyDocumentStructureReady(Document $document): void
    {
        $user = $document->user;
        
        if (!$this->canSendNotification($user)) {
            return;
        }

        $message = "‚úÖ <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n" .
            "üìÑ {$document->title}\n\n" .
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n" .
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n" .
            "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è";

        $this->sendNotificationWithMenu($user, $message, $document);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
     */
    public function notifyDocumentContentReady(Document $document): void
    {
        $user = $document->user;
        
        if (!$this->canSendNotification($user)) {
            return;
        }

        $message = "üéâ <b>–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤!</b>\n\n" .
            "üìÑ {$document->title}\n\n" .
            "‚ú® –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ\n" .
            "üì• –ú–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç";

        $this->sendNotificationWithMenu($user, $message, $document);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    public function notifyDocumentGenerationFailed(Document $document): void
    {
        $user = $document->user;
        
        if (!$this->canSendNotification($user)) {
            return;
        }

        $statusText = match($document->status->value) {
            'pre_generation_failed' => '—Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
            'full_generation_failed' => '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è',
            default => '–æ–±—Ä–∞–±–æ—Ç–∫–µ'
        };

        $message = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ {$statusText}</b>\n\n" .
            "üìÑ {$document->title}\n\n" .
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";

        $this->sendNotificationWithMenu($user, $message, $document);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public function sendDocumentFile(User $user, File $file): void
    {
        if (!$this->canSendNotification($user)) {
            return;
        }

        try {
            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            $content = file_get_contents($file->getFullPath());
            
            if (!$content) {
                Log::warning('Could not read document file', ['file_id' => $file->id]);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram
            $this->sendDocumentToTelegram($user->telegram_id, $content, $file->display_name);
            
        } catch (\Exception $e) {
            Log::error('Failed to send document file to Telegram', [
                'user_id' => $user->id,
                'file_id' => $file->id,
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    public function sendDocumentFileByDocument(Document $document): void
    {
        $user = $document->user;
        
        if (!$this->canSendNotification($user)) {
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Word —Ñ–∞–π–ª
        $wordContent = $this->generateWordDocument($document);
        
        if (!$wordContent) {
            Log::warning('Could not generate Word document', ['document_id' => $document->id]);
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram
        $this->sendDocumentToTelegram($user->telegram_id, $wordContent, $document->title);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private function canSendNotification(User $user): bool
    {
        return $user->telegram_id && $user->telegram_linked_at;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
     */
    private function sendNotificationWithMenu(User $user, string $message, Document $document): void
    {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL
        $baseUrl = $this->getBaseUrl();
        $isHttps = str_starts_with($baseUrl, 'https://');

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if ($isHttps) {
            // Mini App –∫–Ω–æ–ø–∫–∏ –¥–ª—è HTTPS
            $keyboard = [
                'inline_keyboard' => [[
                    [
                        'text' => 'üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
                        'web_app' => ['url' => $baseUrl . '/documents/' . $document->id]
                    ]
                ]]
            ];
        } else {
            // –û–±—ã—á–Ω—ã–µ URL –¥–ª—è HTTP (dev)
            if (!$user->auth_token) {
                $user->update(['auth_token' => \Illuminate\Support\Str::random(32)]);
                $user->refresh();
            }
            
            $documentUrl = "{$baseUrl}/auto-login/{$user->auth_token}?redirect=" . urlencode('/documents/' . $document->id);
            $keyboard = [
                'inline_keyboard' => [[
                    [
                        'text' => 'üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
                        'url' => $documentUrl
                    ]
                ]]
            ];
        }

        $this->telegramService->sendMessage($user->telegram_id, $message, $keyboard);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private function getBaseUrl(): string
    {
        if (app()->environment('local')) {
            return config('services.telegram.test_app_url');
        }
        
        return config('app.url');
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram
     */
    private function sendDocumentToTelegram(int $chatId, string $content, string $title): void
    {
        try {
            $botToken = config('services.telegram.bot_token');
            $url = "https://api.telegram.org/bot{$botToken}/sendDocument";

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $filename = \Illuminate\Support\Str::slug($title) . '.docx';
            $tempFile = tempnam(sys_get_temp_dir(), 'telegram_doc_');
            file_put_contents($tempFile, $content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ multipart
            $ch = curl_init();
            curl_setopt_array($ch, [
                CURLOPT_URL => $url,
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => [
                    'chat_id' => $chatId,
                    'document' => new \CURLFile($tempFile, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', $filename),
                    'caption' => "üìÑ <b>{$title}</b>\n\n–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!",
                    'parse_mode' => 'HTML'
                ],
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_TIMEOUT => 30
            ]);

            $response = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempFile);

            if ($httpCode === 200) {
                Log::info('Document sent to Telegram successfully', [
                    'chat_id' => $chatId,
                    'filename' => $filename
                ]);
            } else {
                Log::error('Failed to send document to Telegram', [
                    'chat_id' => $chatId,
                    'http_code' => $httpCode,
                    'response' => $response
                ]);
            }
        } catch (\Exception $e) {
            Log::error('Error sending document to Telegram', [
                'chat_id' => $chatId,
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Word –¥–æ–∫—É–º–µ–Ω—Ç
     */
    private function generateWordDocument(Document $document): ?string
    {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Word
            $wordService = app(\App\Services\Documents\Files\WordDocumentService::class);
            $file = $wordService->generate($document);
            
            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            return file_get_contents($file->getFullPath());
        } catch (\Exception $e) {
            Log::error('Failed to generate Word document for Telegram', [
                'document_id' => $document->id,
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }
} 