<?php

namespace App\Services\Telegram;

use App\Models\User;
use App\Services\Documents\DocumentTransferService;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class TelegramBotService
{
    private string $botToken;
    private string $baseUrl;

    public function __construct()
    {
        $this->botToken = config('services.telegram.bot_token');
        $this->baseUrl = "https://api.telegram.org/bot{$this->botToken}";
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public function sendMessage(int $chatId, string $text, array $keyboard = null): array
    {
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];

        if ($keyboard) {
            $data['reply_markup'] = json_encode($keyboard);
        }

        Log::info('Sending Telegram message', [
            'chat_id' => $chatId,
            'text_length' => strlen($text),
            'has_keyboard' => !empty($keyboard)
        ]);

        $result = $this->makeRequest('sendMessage', $data);
        
        Log::info('Telegram message send result', [
            'success' => $result['ok'] ?? false,
            'message_id' => $result['result']['message_id'] ?? null,
            'error' => $result['description'] ?? null
        ]);

        return $result;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-—Ö—É–∫
     */
    public function setWebhook(string $url): array
    {
        return $this->makeRequest('setWebhook', [
            'url' => $url,
            'allowed_updates' => ['message', 'callback_query']
        ]);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–µ–±-—Ö—É–∫
     */
    public function deleteWebhook(): array
    {
        return $this->makeRequest('deleteWebhook');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±-—Ö—É–∫–µ
     */
    public function getWebhookInfo(): array
    {
        return $this->makeRequest('getWebhookInfo');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    public function getMe(): array
    {
        return $this->makeRequest('getMe');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /start —Å —Ç–æ–∫–µ–Ω–æ–º
     */
    public function handleStart(array $message): array
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        $user = $message['from'];

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
        if (preg_match('/^\/start\s+(.+)$/', $text, $matches)) {
            $token = trim($matches[1]);
            
            Log::info('Received /start with token', [
                'chat_id' => $chatId,
                'token' => substr($token, 0, 10) . '...',
                'is_auth_token' => str_starts_with($token, 'auth_')
            ]);
            
            // –í–ê–ñ–ù–û: –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if (str_starts_with($token, 'auth_')) {
                Log::info('Processing auth token with priority', ['chat_id' => $chatId]);
                return $this->handleTelegramAuth($chatId, $user, $token);
            } else {
                Log::info('Processing link token', ['chat_id' => $chatId]);
                return $this->linkTelegramAccount($chatId, $user, $token);
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
        $linkedUser = User::where('telegram_id', $chatId)->first();
        
        if ($linkedUser) {
            Log::info('No token provided, showing menu for linked user', [
                'chat_id' => $chatId,
                'user_id' => $linkedUser->id
            ]);
            return $this->sendLinkedUserMenu($chatId, $linkedUser);
        }

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Log::info('No token and no linked user, creating new account automatically', ['chat_id' => $chatId]);
        return $this->createAutoAccount($chatId, $user);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public function handleMessage(array $message): array
    {
        $chatId = $message['chat']['id'];
        $user = $message['from'];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        $linkedUser = User::where('telegram_id', $chatId)->first();
        
        if ($linkedUser) {
            return $this->sendLinkedUserMenu($chatId, $linkedUser);
        }

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Log::info('No linked user found, creating new account automatically', ['chat_id' => $chatId]);
        return $this->createAutoAccount($chatId, $user);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private function sendLinkedUserMenu(int $chatId, User $user): array
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_token –¥–ª—è fallback
        if (!$user->auth_token) {
            $user->update(['auth_token' => \Illuminate\Support\Str::random(32)]);
            $user->refresh();
        }

        $messageText = "üëã <b>–ü—Ä–∏–≤–µ—Ç, {$user->name}!</b>\n\n" .
        
            "üí∞ –ë–∞–ª–∞–Ω—Å: " . number_format($user->balance_rub ?? 0, 0, ',', ' ') . " ‚ÇΩ\n\n" .
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        $keyboard = $this->createLoginKeyboard($user);

        return $this->sendMessage($chatId, $messageText, $keyboard);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private function getBaseUrl(): string
    {
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π URL
        if (app()->environment('local')) {
            return config('services.telegram.test_app_url');
        }
        
        return config('app.url');
    }

    /**
     * –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Telegram —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    public function linkTelegramAccount(int $chatId, array $telegramUser, string $token): array
    {
        Log::info('Starting Telegram account linking', [
            'chat_id' => $chatId,
            'token' => $token,
            'telegram_user' => $telegramUser
        ]);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å–≤—è–∑–∫–∏
        $user = User::where('telegram_link_token', $token)->first();

        if (!$user) {
            Log::warning('Invalid link token', ['token' => $token]);

            // –î–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            'url' => 'https://t.me/gptpult_help'
                        ]
                    ]
                ]
            ];

            return $this->sendMessage($chatId, 
                "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–≤—è–∑–∫–∏.\n\n" .
                "–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ gptpult.ru/lk\n\n",
                $keyboard
            );
            
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
        if (!$this->isTokenValid($user)) {
            Log::warning('Expired link token', ['user_id' => $user->id, 'token' => $token]);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            $keyboard = $this->createLoginKeyboard($user);

            return $this->sendMessage($chatId, 
                "‚ùå –¢–æ–∫–µ–Ω —Å–≤—è–∑–∫–∏ –∏—Å—Ç—ë–∫.\n\n" .
                "–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
                $keyboard
            );
        }

        Log::info('User found by token', ['user_id' => $user->id, 'user_name' => $user->name]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç
        $existingUser = User::where('telegram_id', $chatId)->first();
        if ($existingUser && $existingUser->id !== $user->id) {
            Log::warning('Telegram account already linked to another user', [
                'chat_id' => $chatId,
                'existing_user_id' => $existingUser->id,
                'current_user_id' => $user->id
            ]);
            return $this->sendMessage($chatId, 
                "‚ùå –≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥—Ä—É–≥–∏–º Telegram
        if ($user->telegram_id && $user->telegram_id !== $chatId) {
            Log::warning('User already linked to another Telegram', [
                'user_id' => $user->id,
                'existing_telegram_id' => $user->telegram_id,
                'new_chat_id' => $chatId
            ]);
            return $this->sendMessage($chatId, 
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º Telegram.\n\n" .
                "–û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç = –æ–¥–∏–Ω Telegram!"
            );
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $userName = $telegramUser['first_name'] . (($telegramUser['last_name'] ?? '') ? ' ' . $telegramUser['last_name'] : '');
        
        Log::info('Updating user with Telegram data', [
            'user_id' => $user->id,
            'chat_id' => $chatId,
            'username' => $telegramUser['username'] ?? null,
            'new_name' => $userName
        ]);

        // –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        $updateResult = $user->update([
            'telegram_id' => $chatId,
            'telegram_username' => $telegramUser['username'] ?? null,
            'telegram_linked_at' => now(),
            'telegram_link_token' => null, // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
            'telegram_token_expires_at' => null, // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            'name' => $userName,
        ]);

        Log::info('User update result', ['success' => $updateResult]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_token –¥–ª—è fallback
        if (!$user->auth_token) {
            Log::warning('User has no auth_token, generating new one', ['user_id' => $user->id]);
            $user->update(['auth_token' => \Illuminate\Support\Str::random(32)]);
            $user->refresh();
        }

        Log::info('Telegram account linked successfully', [
            'user_id' => $user->id,
            'telegram_id' => $chatId,
            'telegram_username' => $telegramUser['username'] ?? null
        ]);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        $keyboard = $this->createLoginKeyboard($user);

        Log::info('Sending success message with keyboard', ['keyboard' => $keyboard]);

        $messageText = "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!</b>\n\n" .
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$user->name}!\n\n" .
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:";

        return $this->sendMessage($chatId, $messageText, $keyboard);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —Å–≤—è–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function generateLinkToken(User $user): string
    {
        $token = Str::random(32);
        $expiresAt = now()->addMinutes(10); // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç
        
        $user->update([
            'telegram_link_token' => $token,
            'telegram_token_expires_at' => $expiresAt
        ]);

        Log::info('Generated link token', [
            'user_id' => $user->id,
            'expires_at' => $expiresAt->toISOString()
        ]);

        return $token;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function generateAuthToken(User $user): string
    {
        $token = 'auth_' . Str::random(32);
        $expiresAt = now()->addMinutes(10); // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç
        
        $user->update([
            'telegram_link_token' => $token,
            'telegram_token_expires_at' => $expiresAt
        ]);

        Log::info('Generated auth token', [
            'user_id' => $user->id,
            'expires_at' => $expiresAt->toISOString()
        ]);

        return $token;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
     */
    private function isTokenValid(User $user): bool
    {
        if (!$user->telegram_link_token || !$user->telegram_token_expires_at) {
            Log::info('Token invalid: missing token or expiration', [
                'user_id' => $user->id,
                'has_token' => !empty($user->telegram_link_token),
                'has_expiration' => !empty($user->telegram_token_expires_at)
            ]);
            return false;
        }

        $isValid = now()->isBefore($user->telegram_token_expires_at);
        
        if (!$isValid) {
            Log::info('Token expired, clearing', [
                'user_id' => $user->id,
                'expired_at' => $user->telegram_token_expires_at->toISOString(),
                'current_time' => now()->toISOString()
            ]);
            
            // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω
            $user->update([
                'telegram_link_token' => null,
                'telegram_token_expires_at' => null
            ]);
        } else {
            Log::info('Token is valid', [
                'user_id' => $user->id,
                'expires_at' => $user->telegram_token_expires_at->toISOString(),
                'current_time' => now()->toISOString()
            ]);
        }

        return $isValid;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å URL –±–æ—Ç–∞ –¥–ª—è —Å–≤—è–∑–∫–∏
     */
    public function getBotLinkUrl(string $token): string
    {
        $botUsername = config('services.telegram.bot_username');
        return "https://t.me/{$botUsername}?start={$token}";
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å URL –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    public function getBotAuthUrl(string $token): string
    {
        $botUsername = config('services.telegram.bot_username');
        return "https://t.me/{$botUsername}?start={$token}";
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
     */
    private function handleTelegramAuth(int $chatId, array $telegramUser, string $token): array
    {
        Log::info('Starting Telegram authorization', [
            'chat_id' => $chatId,
            'token' => substr($token, 0, 15) . '...',
            'telegram_user' => $telegramUser
        ]);

        // –°–ù–ê–ß–ê–õ–ê –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $userWithToken = User::where('telegram_link_token', $token)->first();

        if (!$userWithToken) {
            Log::warning('Invalid auth token', ['token' => substr($token, 0, 15) . '...']);

            // –î–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            'url' => 'https://t.me/gptpult_help'
                        ]
                    ]
                ]
            ];

            return $this->sendMessage($chatId, 
                "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n" .
                "–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ gptpult.ru/lk\n\n",
                $keyboard
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
        if (!$this->isTokenValid($userWithToken)) {
            Log::warning('Expired auth token', ['user_id' => $userWithToken->id, 'token' => substr($token, 0, 15) . '...']);
            
            // –î–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ª–æ–≥–∏–Ω–æ–º —á–µ—Ä–µ–∑ auth_token
            $keyboard = $this->createLoginKeyboard($userWithToken);

            return $this->sendMessage($chatId, 
                "‚ùå –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫.\n\n" .
                "–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ gptpult.ru/lk",
                $keyboard
            );
        }

        Log::info('User found by auth token', [
            'user_id' => $userWithToken->id, 
            'user_name' => $userWithToken->name,
            'user_email' => $userWithToken->email
        ]);

        // –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        $existingUserWithTelegram = User::where('telegram_id', $chatId)->first();
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $documentsTransferred = 0;
        $transferService = new DocumentTransferService();
        $finalUser = $userWithToken; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º
        
        if ($existingUserWithTelegram) {
            Log::info('Found existing user with this Telegram ID', [
                'existing_user_id' => $existingUserWithTelegram->id,
                'existing_user_email' => $existingUserWithTelegram->email,
                'token_user_id' => $userWithToken->id,
                'token_user_email' => $userWithToken->email
            ]);
            
            if ($existingUserWithTelegram->id === $userWithToken->id) {
                // –≠—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                Log::info('Same user, just clearing token');
                $userWithToken->update([
                    'telegram_link_token' => null,
                    'telegram_token_expires_at' => null
                ]);
                $finalUser = $userWithToken;
            } else {
                // –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –ù—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                if ($transferService->isTempUser($userWithToken)) {
                    Log::info('Token user is temporary, transferring documents to existing Telegram user', [
                        'from_temp_user' => $userWithToken->id,
                        'to_permanent_user' => $existingUserWithTelegram->id
                    ]);
                    
                    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É
                    $transferResult = $transferService->transferDocuments($userWithToken, $existingUserWithTelegram);
                    $documentsTransferred = $transferResult['transferred_count'];
                    
                    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    $userWithToken->update([
                        'telegram_link_token' => null,
                        'telegram_token_expires_at' => null
                    ]);
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    $finalUser = $existingUserWithTelegram;
                } else {
                    Log::warning('Token user is permanent but Telegram already linked to another user', [
                        'token_user' => $userWithToken->id,
                        'telegram_user' => $existingUserWithTelegram->id
                    ]);
                    
                    return $this->sendMessage($chatId, 
                        "‚ùå –≠—Ç–æ—Ç Telegram —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º"
                    );
                }
            }
        } else {
            // –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º Telegram ID
            Log::info('No existing user with this Telegram ID, linking to token user');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç
            if ($transferService->isTempUser($userWithToken)) {
                // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ
                $firstName = $telegramUser['first_name'];
                $lastName = $telegramUser['last_name'] ?? '';
                $userName = trim($firstName . ' ' . $lastName);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º email —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –±–æ–ª–µ–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π
                $userWithToken->update([
                    'name' => $userName,
                    'email' => Str::random(10) . '@linked.user', // –ú–µ–Ω—è–µ–º —Å @auto.user –Ω–∞ @linked.user
                    'telegram_id' => $chatId,
                    'telegram_username' => $telegramUser['username'] ?? null,
                    'telegram_linked_at' => now(),
                    'telegram_link_token' => null, // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
                    'telegram_token_expires_at' => null, // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                ]);
                
                Log::info('Converted temporary user to permanent', [
                    'user_id' => $userWithToken->id,
                    'old_email_type' => '@auto.user',
                    'new_email_type' => '@linked.user'
                ]);
            } else {
                // –≠—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å—Ç–æ —Å–≤—è–∑—ã–≤–∞–µ–º —Å Telegram
                $firstName = $telegramUser['first_name'];
                $lastName = $telegramUser['last_name'] ?? '';
                $userName = trim($firstName . ' ' . $lastName);
                
                $userWithToken->update([
                    'telegram_id' => $chatId,
                    'telegram_username' => $telegramUser['username'] ?? null,
                    'telegram_linked_at' => now(),
                    'telegram_link_token' => null, // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
                    'telegram_token_expires_at' => null, // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    'name' => $userName,
                ]);
                
                Log::info('Linked permanent user with Telegram', [
                    'user_id' => $userWithToken->id,
                    'telegram_id' => $chatId
                ]);
            }
            
            $finalUser = $userWithToken;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_token –¥–ª—è fallback
        if (!$finalUser->auth_token) {
            Log::warning('User has no auth_token, generating new one', ['user_id' => $finalUser->id]);
            $finalUser->update(['auth_token' => Str::random(32)]);
            $finalUser->refresh();
        }

        Log::info('Telegram authorization completed successfully', [
            'final_user_id' => $finalUser->id,
            'telegram_id' => $chatId,
            'telegram_username' => $telegramUser['username'] ?? null,
            'documents_transferred' => $documentsTransferred
        ]);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        $keyboard = $this->createLoginKeyboard($finalUser);

        Log::info('Sending auth success message with keyboard', ['keyboard' => $keyboard]);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–∏ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã
        $messageText = "‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞!</b>\n\n" .
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$finalUser->name}!\n\n";
        
        $messageText .= "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ø–µ—Ä—å —Å–≤—è–∑–∞–Ω —Å Telegram. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:";

        return $this->sendMessage($chatId, $messageText, $keyboard);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ö–æ–¥–∞ (–±—Ä–∞—É–∑–µ—Ä + –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
     */
    private function createLoginKeyboard(User $user): array
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_token –¥–ª—è fallback
        if (!$user->auth_token) {
            $user->update(['auth_token' => Str::random(32)]);
            $user->refresh();
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        $baseUrl = $this->getBaseUrl();
        $isHttps = str_starts_with($baseUrl, 'https://');

        if ($isHttps) {
            // –î–ª—è HTTPS –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
            return [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üåê –í–æ–π—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ',
                            'url' => "{$baseUrl}/auto-login/{$user->auth_token}?redirect=" . urlencode('/lk')
                        ]
                    ],
                    [
                        [
                            'text' => 'üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                            'web_app' => ['url' => $baseUrl . '/lk']
                        ]
                    ],
                    [
                        [
                            'text' => 'üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
                            'web_app' => ['url' => $baseUrl . '/new']
                        ]
                    ],
                    [
                        [
                            'text' => 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            'url' => 'https://t.me/gptpult_help'
                        ]
                    ]
                ]
            ];
        } else {
            // –î–ª—è HTTP —Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            $lkUrl = "{$baseUrl}/auto-login/{$user->auth_token}?redirect=" . urlencode('/lk');
            $newDocUrl = "{$baseUrl}/auto-login/{$user->auth_token}?redirect=" . urlencode('/new');
            
            return [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
                            'url' => $lkUrl
                        ]
                    ],
                    [
                        [
                            'text' => 'üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
                            'url' => $newDocUrl
                        ]
                    ],
                    [
                        [
                            'text' => 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            'url' => 'https://t.me/gptpult_help'
                        ]
                    ]
                ]
            ];
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
     */
    private function createAutoAccount(int $chatId, array $telegramUser): array
    {
        Log::info('Creating auto account for Telegram user', [
            'chat_id' => $chatId,
            'telegram_user' => $telegramUser
        ]);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
        $userName = $telegramUser['first_name'] . (($telegramUser['last_name'] ?? '') ? ' ' . $telegramUser['last_name'] : '');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $email = 'telegram_' . $chatId . '@auto.user';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞)
        $existingUser = User::where('email', $email)->first();
        if ($existingUser) {
            Log::warning('User with auto email already exists', [
                'email' => $email,
                'existing_user_id' => $existingUser->id
            ]);
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram, —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ
            if (!$existingUser->telegram_id) {
                $existingUser->update([
                    'telegram_id' => $chatId,
                    'telegram_username' => $telegramUser['username'] ?? null,
                    'telegram_linked_at' => now(),
                ]);
                
                return $this->sendLinkedUserMenu($chatId, $existingUser);
            }
            
            // –ï—Å–ª–∏ —É–∂–µ —Å–≤—è–∑–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            return $this->sendLinkedUserMenu($chatId, $existingUser);
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $newUser = User::create([
                'name' => $userName,
                'email' => $email,
                'password' => bcrypt(\Illuminate\Support\Str::random(32)), // –°–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
                'auth_token' => \Illuminate\Support\Str::random(32),
                'role_id' => \App\Enums\UserRole::USER,
                'status' => 1, // –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                'balance_rub' => 0,
                'telegram_id' => $chatId,
                'telegram_username' => $telegramUser['username'] ?? null,
                'telegram_linked_at' => now(),
                'privacy_consent' => true,
                'privacy_consent_at' => now(),
            ]);

            Log::info('Auto account created successfully', [
                'user_id' => $newUser->id,
                'telegram_id' => $chatId,
                'email' => $email,
                'name' => $userName
            ]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $welcomeMessage = "<b>GPT –ü—É–ª—å—Ç - –°–∞–º—ã–π —É–º–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!</b>\n\n" .
                "üëã –ü—Ä–∏–≤–µ—Ç, {$userName}!\n\n" .
                "–°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–æ–≤–æ–≥–æ –ò–ò\n\n" .
                "<b>–ß—Ç–æ —É–º–µ–µ—Ç GPT –ü—É–ª—å—Ç:</b>\n" .
                "üìù –†–µ—Ñ–µ—Ä–∞—Ç—ã, –∫—É—Ä—Å–æ–≤—ã–µ, —ç—Å—Å–µ, –¥–æ–∫–ª–∞–¥—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n" .
                "üéØ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç 90%\n" .
                "üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢ –†–§\n" .
                "üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 10 –º–∏–Ω—É—Ç\n" .
                "ü§ñ Mix AI - –Ω–µ—Å–∫–æ–ª—å–∫–æ –ò–ò —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–æ–π\n\n" .
                "üéÅ –ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ - —Å–æ–∑–¥–∞–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã!\n\n" .
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

            $keyboard = $this->createLoginKeyboard($newUser);

            return $this->sendMessage($chatId, $welcomeMessage, $keyboard);

        } catch (\Exception $e) {
            Log::error('Failed to create auto account', [
                'chat_id' => $chatId,
                'telegram_user' => $telegramUser,
                'error' => $e->getMessage()
            ]);

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä—É—á–Ω–æ–π —Å–≤—è–∑–∫–µ
            return $this->sendMessage($chatId, 
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n" .
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∫–∏.\n\n" .
                "üí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @gptpult_help"
            );
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API
     */
    private function makeRequest(string $method, array $data = []): array
    {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π cURL –∫–∞–∫ fallback
            $url = "{$this->baseUrl}/{$method}";
            
            $ch = curl_init();
            $curlOptions = [
                CURLOPT_URL => $url,
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => json_encode($data),
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_CONNECTTIMEOUT => 15,
                CURLOPT_HTTPHEADER => [
                    'Content-Type: application/json',
                    'User-Agent: Laravel/11.0'
                ],
                CURLOPT_SSL_VERIFYPEER => true,
                CURLOPT_SSL_VERIFYHOST => 2,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_MAXREDIRS => 3,
            ];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if (config('services.telegram.use_proxy') && config('services.telegram.proxy_url')) {
                $proxyUrl = config('services.telegram.proxy_url');
                
                // –ü–∞—Ä—Å–∏–º URL –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                $parsedUrl = parse_url($proxyUrl);
                
                if ($parsedUrl) {
                    $proxyHost = $parsedUrl['host'] . ':' . ($parsedUrl['port'] ?? 80);
                    $curlOptions[CURLOPT_PROXY] = $proxyHost;
                    $curlOptions[CURLOPT_PROXYTYPE] = CURLPROXY_HTTP;
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                    if (isset($parsedUrl['user']) && isset($parsedUrl['pass'])) {
                        $curlOptions[CURLOPT_PROXYUSERPWD] = $parsedUrl['user'] . ':' . $parsedUrl['pass'];
                    }
                }
            }
            
            curl_setopt_array($ch, $curlOptions);
            
            $response = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            $error = curl_error($ch);
            curl_close($ch);
            
            if ($response === false || !empty($error)) {
                throw new \Exception("cURL error: {$error}");
            }
            
            $result = json_decode($response, true);
            
            if ($httpCode !== 200 || !$result['ok']) {
                Log::error('Telegram API error', [
                    'method' => $method,
                    'data' => $data,
                    'response' => $result,
                    'http_code' => $httpCode
                ]);
            }
            
            return $result;
        } catch (\Exception $e) {
            Log::error('Telegram API request failed', [
                'method' => $method,
                'data' => $data,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return ['ok' => false, 'error' => $e->getMessage()];
        }
    }
} 