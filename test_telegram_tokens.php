<?php

require_once __DIR__ . '/vendor/autoload.php';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º Laravel
$app = require_once __DIR__ . '/bootstrap/app.php';
$app->make(\Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Models\User;
use App\Services\Telegram\TelegramBotService;
use Illuminate\Support\Facades\Log;

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Telegram —Ç–æ–∫–µ–Ω–æ–≤\n";
echo "==========================================\n\n";

// 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
$testUser = User::where('email', 'like', '%@auto.user')->first();
if (!$testUser) {
    $testUser = User::create([
        'name' => 'Test User',
        'email' => 'test_' . time() . '@auto.user',
        'password' => bcrypt('password'),
        'balance_rub' => 100
    ]);
    echo "‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$testUser->email}\n";
} else {
    echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$testUser->email}\n";
}

$telegramService = new TelegramBotService();

echo "\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ —Å–≤—è–∑–∫–∏:\n";
echo "----------------------------------------\n";

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å–≤—è–∑–∫–∏
$linkToken = $telegramService->generateLinkToken($testUser);
$testUser->refresh(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

echo "‚Ä¢ –¢–æ–∫–µ–Ω —Å–≤—è–∑–∫–∏: " . substr($linkToken, 0, 20) . "...\n";
echo "‚Ä¢ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: " . $testUser->telegram_token_expires_at->format('Y-m-d H:i:s') . "\n";
echo "‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: " . $testUser->telegram_token_expires_at->diffForHumans() . "\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ isTokenValid
$reflection = new ReflectionClass($telegramService);
$isTokenValidMethod = $reflection->getMethod('isTokenValid');
$isTokenValidMethod->setAccessible(true);

$isValid = $isTokenValidMethod->invoke($telegramService, $testUser);
echo "‚Ä¢ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: " . ($isValid ? "–î–ê ‚úÖ" : "–ù–ï–¢ ‚ùå") . "\n";

echo "\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n";
echo "---------------------------------------------\n";

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
$authToken = $telegramService->generateAuthToken($testUser);
$testUser->refresh();

echo "‚Ä¢ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " . substr($authToken, 0, 20) . "...\n";
echo "‚Ä¢ –ü—Ä–µ—Ñ–∏–∫—Å 'auth_': " . (str_starts_with($authToken, 'auth_') ? "–î–ê ‚úÖ" : "–ù–ï–¢ ‚ùå") . "\n";
echo "‚Ä¢ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: " . $testUser->telegram_token_expires_at->format('Y-m-d H:i:s') . "\n";
echo "‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: " . $testUser->telegram_token_expires_at->diffForHumans() . "\n";

$isValid = $isTokenValidMethod->invoke($telegramService, $testUser);
echo "‚Ä¢ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: " . ($isValid ? "–î–ê ‚úÖ" : "–ù–ï–¢ ‚ùå") . "\n";

echo "\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL-–æ–≤ –±–æ—Ç–∞:\n";
echo "----------------------------\n";

$linkUrl = $telegramService->getBotLinkUrl($linkToken);
$authUrl = $telegramService->getBotAuthUrl($authToken);

echo "‚Ä¢ URL —Å–≤—è–∑–∫–∏: {$linkUrl}\n";
echo "‚Ä¢ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {$authUrl}\n";

echo "\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:\n";
echo "---------------------------------\n";

// –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–µ
$testUser->update([
    'telegram_token_expires_at' => now()->subMinutes(1)
]);
$testUser->refresh();

echo "‚Ä¢ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ø—Ä–æ—à–ª–æ–µ: " . $testUser->telegram_token_expires_at->format('Y-m-d H:i:s') . "\n";

$isValid = $isTokenValidMethod->invoke($telegramService, $testUser);
echo "‚Ä¢ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è: " . ($isValid ? "–î–ê ‚ùå" : "–ù–ï–¢ ‚úÖ") . "\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –±—ã–ª –æ—á–∏—â–µ–Ω
$testUser->refresh();
echo "‚Ä¢ –¢–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: " . (empty($testUser->telegram_link_token) ? "–î–ê ‚úÖ" : "–ù–ï–¢ ‚ùå") . "\n";
echo "‚Ä¢ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–æ: " . (empty($testUser->telegram_token_expires_at) ? "–î–ê ‚úÖ" : "–ù–ï–¢ ‚ùå") . "\n";

echo "\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:\n";
echo "---------------------------\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å auth_token
if (!$testUser->auth_token) {
    $testUser->update(['auth_token' => \Illuminate\Support\Str::random(32)]);
    $testUser->refresh();
}

$createKeyboardMethod = $reflection->getMethod('createLoginKeyboard');
$createKeyboardMethod->setAccessible(true);

$keyboard = $createKeyboardMethod->invoke($telegramService, $testUser);

echo "‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: " . (isset($keyboard['inline_keyboard']) ? "–î–ê ‚úÖ" : "–ù–ï–¢ ‚ùå") . "\n";
echo "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: " . count($keyboard['inline_keyboard']) . "\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫
$hasWebApp = false;
$hasUrl = false;

foreach ($keyboard['inline_keyboard'] as $row) {
    foreach ($row as $button) {
        if (isset($button['web_app'])) $hasWebApp = true;
        if (isset($button['url'])) $hasUrl = true;
    }
}

echo "‚Ä¢ –ï—Å—Ç—å WebApp –∫–Ω–æ–ø–∫–∏: " . ($hasWebApp ? "–î–ê ‚úÖ" : "–ù–ï–¢ ‚ùå") . "\n";
echo "‚Ä¢ –ï—Å—Ç—å URL –∫–Ω–æ–ø–∫–∏: " . ($hasUrl ? "–î–ê ‚úÖ" : "–ù–ï–¢ ‚ùå") . "\n";

echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
echo "==========================\n";

// –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
$testUser->update([
    'telegram_link_token' => null,
    'telegram_token_expires_at' => null,
]);

echo "üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n"; 