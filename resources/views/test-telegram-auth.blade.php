<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç Telegram –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 800px; 
            margin: 50px auto; 
            padding: 20px;
            background: #f5f5f5;
        }
        .card { 
            background: white; 
            padding: 20px; 
            border-radius: 8px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        button { 
            background: #0088cc; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            cursor: pointer; 
            margin: 5px;
        }
        button:hover { background: #006ba8; }
        .result { 
            background: #f9f9f9; 
            padding: 15px; 
            border-radius: 5px; 
            margin-top: 15px;
            border-left: 4px solid #0088cc;
        }
        .success { border-left-color: #28a745; }
        .error { border-left-color: #dc3545; }
        pre { 
            background: #f8f9fa; 
            padding: 10px; 
            border-radius: 3px; 
            overflow-x: auto;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="card">
        <h1>ü§ñ –¢–µ—Å—Ç Telegram –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h1>
        <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram.</p>
    </div>

    <div class="card">
        <h2>1. –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h2>
        <p>–ù–∞–π–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã.</p>
        <button onclick="testFullFlow()">üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç</button>
        <div id="fullFlowResult"></div>
    </div>

    <div class="card">
        <h2>2. –¢–µ—Å—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
        <p>–í–≤–µ–¥–∏—Ç–µ ID –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</p>
        <input type="number" id="userId" placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="padding: 8px; margin-right: 10px;">
        <button onclick="testTelegramAuth()">üîó –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</button>
        <div id="telegramAuthResult"></div>
    </div>

    <div class="card">
        <h2>3. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
        <button onclick="loadUsers()">üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</button>
        <div id="usersResult"></div>
    </div>

    <script>
        async function testFullFlow() {
            const resultDiv = document.getElementById('fullFlowResult');
            resultDiv.innerHTML = '<p>‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç...</p>';
            
            try {
                const response = await fetch('/test/full-flow');
                const data = await response.json();
                
                if (data.status === 'success') {
                    resultDiv.innerHTML = `
                        <div class="result success">
                            <h3>‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h3>
                            <p><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ID ${data.temp_user.id} (${data.temp_user.email})</p>
                            <p><strong>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—ã–ª–æ:</strong> ${data.temp_user.documents_before}</p>
                            <p><strong>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ID ${data.permanent_user.id} (${data.permanent_user.email})</p>
                            <p><strong>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞–ª–æ:</strong> ${data.permanent_user.documents_after}</p>
                            <p><strong>–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</strong> ${data.documents_transferred}</p>
                            <pre>${JSON.stringify(data.transfer_result, null, 2)}</pre>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `<div class="result error"><h3>‚ùå –û—à–∏–±–∫–∞:</h3><p>${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p></div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="result error"><h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:</h3><p>${error.message}</p></div>`;
            }
        }

        async function testTelegramAuth() {
            const userId = document.getElementById('userId').value;
            const resultDiv = document.getElementById('telegramAuthResult');
            
            if (!userId) {
                resultDiv.innerHTML = '<div class="result error"><p>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p></div>';
                return;
            }
            
            resultDiv.innerHTML = '<p>‚è≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...</p>';
            
            try {
                const response = await fetch(`/test/telegram-auth/${userId}`);
                const data = await response.json();
                
                if (response.ok) {
                    resultDiv.innerHTML = `
                        <div class="result success">
                            <h3>‚úÖ –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω!</h3>
                            <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ:</strong> ${JSON.stringify(data.user_before)}</p>
                            <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ:</strong> ${JSON.stringify(data.user_after)}</p>
                            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</strong> ${data.documents_count}</p>
                            <pre>${JSON.stringify(data, null, 2)}</pre>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `<div class="result error"><h3>‚ùå –û—à–∏–±–∫–∞:</h3><p>${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p></div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="result error"><h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:</h3><p>${error.message}</p></div>`;
            }
        }

        async function loadUsers() {
            const resultDiv = document.getElementById('usersResult');
            resultDiv.innerHTML = '<p>‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>';
            
            try {
                // –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
                resultDiv.innerHTML = `
                    <div class="result">
                        <h3>üìã –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ ID:</h3>
                        <p><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (@auto.user):</strong> 3, 4, 9, 10, 11</p>
                        <p><strong>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</strong> 1, 2, 5, 6, 7, 8, 12</p>
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ ID –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–ª–µ –≤—ã—à–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</p>
                    </div>
                `;
            } catch (error) {
                resultDiv.innerHTML = `<div class="result error"><h3>‚ùå –û—à–∏–±–∫–∞:</h3><p>${error.message}</p></div>`;
            }
        }
    </script>
</body>
</html> 